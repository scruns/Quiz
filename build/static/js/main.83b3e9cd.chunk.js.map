{"version":3,"sources":["svg/logo.svg","api/quizQuestions.js","components/Question.js","components/QuestionCount.js","components/AnswerOption.js","components/Quiz.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","quizQuestions","question","answers","type","content","Question","props","react_default","a","createElement","className","QuestionCount","counter","total","AnswerOption","name","checked","answerType","answer","id","value","disabled","onChange","onAnswerSelected","htmlFor","answerContent","Quiz","react_transition_group","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","transitionAppear","transitionAppearTimeout","key","questionId","components_QuestionCount","questionTotal","components_Question","answerOptions","map","components_AnswerOption","Result","src","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","answersCount","Nintendo","Microsoft","Sony","result","handleAnswerSelected","bind","assertThisInitialized","_this2","shuffledAnswerOptions","shuffleArray","setState","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","event","_this3","setUserAnswer","currentTarget","setTimeout","setNextQuestion","setResults","getResults","objectSpread","defineProperty","answersCountKeys","keys","answersCountValues","maxAnswerCount","max","apply","filter","components_Quiz","components_Result","quizResult","logo","alt","renderResult","renderQuiz","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83b3e9cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.53ef0625.svg\";","var quizQuestions = [\r\n  {\r\n      question: \"Who is your favorite Ginger?\",\r\n      answers: [\r\n          {\r\n              type: \"1\",\r\n              content: \"Ariel, the lil mermaid bitch\"\r\n          },\r\n          {\r\n              type: \"2\",\r\n              content: \"The Scottish girl from Brave...does she have a name?\"\r\n          },\r\n          {\r\n              type: \"3\",\r\n              content: \"Fred, from Drop Dead Fred\"\r\n          },\r\n          {\r\n              type: \"4\",\r\n              content: \"lol, I didn't make a 4th option, but you can choose this, doesn't matter really.\"\r\n          }\r\n      ]\r\n  },\r\n  {\r\n      question: \"You invented a time machine, or Jamison does and decides you can use it once.  What do you do?\",\r\n      answers: [\r\n          {\r\n              type: \"1\",\r\n              content: \"Go back to 1930~, you are going to kill Hitler\"\r\n          },\r\n          {\r\n              type: \"2\",\r\n              content: \"Travel to the 1600, and convince everyone with your future tech that you are a witch\"\r\n          },\r\n          {\r\n              type: \"3\",\r\n              content: \"Travel to the 1800, have a lot of sex with royalty like King Henry, and try not to fall out a window (Reign Reference...which you could watch)\"\r\n          },\r\n          {\r\n              type: \"4\",\r\n              content: \"Prehistoric times, you are gonna get a pet dinosaur!\"\r\n          }\r\n      ]\r\n  },\r\n  {\r\n      question: \"You can only have one!\",\r\n      answers: [\r\n          {\r\n              type: \"1\",\r\n              content: \"Wine\"\r\n          },\r\n          {\r\n              type: \"2\",\r\n              content: \"Jamie, me, the creator.\"\r\n          },\r\n          {\r\n              type: \"3\",\r\n              content: \"Benedryl, this is here for me.\",\r\n\r\n          },\r\n\r\n          {\r\n              type: \"4\",\r\n              content: \"Sunflower seeds, I fully expect wine to win but I needed something else that might make you hesitate a bit\"\r\n          }\r\n      ]\r\n  },\r\n  {\r\n      question: \"What is your favorite Color?\",\r\n      answers: [\r\n          {\r\n              type: \"1\",\r\n              content: \"Coquelicot\"\r\n          },\r\n          {\r\n              type: \"2\",\r\n              content: \"Smaragdine\"\r\n          },\r\n          {\r\n              type: \"3\",\r\n              content: \"Glaucous\"\r\n          },\r\n          {\r\n              type: \"4\",\r\n              content: \"Xanadu\"\r\n          },\r\n          {\r\n              type: \"5\",\r\n              content: \"Falu\"\r\n          }\r\n      ]\r\n  },\r\n  {\r\n      question: \"Before you finsih this quiz and get your results...What are your thoughts?...I don't actually record your answers\",\r\n      answers: [\r\n          {\r\n              type: \"1\",\r\n              content: \"It's shit.\"\r\n          },\r\n          {\r\n              type: \"2\",\r\n              content: \"It is amazing, react is so cool, how did you do it?\"\r\n          },\r\n          {\r\n              type: \"3\",\r\n              content: \"I probably shouldn't put this on my portfolio\"\r\n          },\r\n          {\r\n              type: \"4\",\r\n              content: \"I want more Quizes from Jamison now!\"\r\n          }\r\n      ]\r\n  }\r\n];\r\n\r\nexport default quizQuestions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Question(props) {\r\n  return <h2 className=\"question\">{props.content}</h2>;\r\n}\r\n\r\nQuestion.propTypes = {\r\n  content: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Question;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction QuestionCount(props) {\r\n  return (\r\n    <div className=\"questionCount\">\r\n      Question <span>{props.counter}</span> of <span>{props.total}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nQuestionCount.propTypes = {\r\n  counter: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired\r\n};\r\n\r\nexport default QuestionCount;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction AnswerOption(props) {\r\n  return (\r\n    <li className=\"answerOption\">\r\n      <input\r\n        type=\"radio\"\r\n        className=\"radioCustomButton\"\r\n        name=\"radioGroup\"\r\n        checked={props.answerType === props.answer}\r\n        id={props.answerType}\r\n        value={props.answerType}\r\n        disabled={props.answer}\r\n        onChange={props.onAnswerSelected}\r\n      />\r\n      <label className=\"radioCustomLabel\" htmlFor={props.answerType}>\r\n        {props.answerContent}\r\n      </label>\r\n    </li>\r\n  );\r\n}\r\n\r\nAnswerOption.propTypes = {\r\n  answerType: PropTypes.string.isRequired,\r\n  answerContent: PropTypes.string.isRequired,\r\n  answer: PropTypes.string.isRequired,\r\n  onAnswerSelected: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AnswerOption;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\nimport Question from '../components/Question';\r\nimport QuestionCount from '../components/QuestionCount';\r\nimport AnswerOption from '../components/AnswerOption';\r\n\r\nfunction Quiz(props) {\r\n  function renderAnswerOptions(key) {\r\n    return (\r\n      <AnswerOption\r\n        key={key.content}\r\n        answerContent={key.content}\r\n        answerType={key.type}\r\n        answer={props.answer}\r\n        questionId={props.questionId}\r\n        onAnswerSelected={props.onAnswerSelected}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <CSSTransitionGroup\r\n      className=\"container\"\r\n      component=\"div\"\r\n      transitionName=\"fade\"\r\n      transitionEnterTimeout={800}\r\n      transitionLeaveTimeout={500}\r\n      transitionAppear\r\n      transitionAppearTimeout={500}\r\n    >\r\n      <div key={props.questionId}>\r\n        <QuestionCount counter={props.questionId} total={props.questionTotal} />\r\n        <Question content={props.question} />\r\n        <ul className=\"answerOptions\">\r\n          {props.answerOptions.map(renderAnswerOptions)}\r\n        </ul>\r\n      </div>\r\n    </CSSTransitionGroup>\r\n  );\r\n}\r\n\r\nQuiz.propTypes = {\r\n  answer: PropTypes.string.isRequired,\r\n  answerOptions: PropTypes.array.isRequired,\r\n  question: PropTypes.string.isRequired,\r\n  questionId: PropTypes.number.isRequired,\r\n  questionTotal: PropTypes.number.isRequired,\r\n  onAnswerSelected: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Quiz;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\n\r\nfunction Result(props) {\r\n  return (\r\n    <CSSTransitionGroup\r\n      className=\"container result\"\r\n      component=\"div\"\r\n      transitionName=\"fade\"\r\n      transitionEnterTimeout={800}\r\n      transitionLeaveTimeout={500}\r\n      transitionAppear\r\n      transitionAppearTimeout={500}\r\n    >\r\n      <div>\r\n    <p>  Wow!  This is unexpected...\r\n     ... Let me recheck the math re quick..\r\n     Huh, well it says here, you should watch</p>\r\n    <img src = \"https://ganstapenguin.com/blog/wp-content/uploads/2019/04/minthem.jpg\" />\r\n     <p> I'm really funny =D </p>  </div>\r\n    </CSSTransitionGroup>\r\n  );\r\n}\r\n\r\nResult.propTypes = {\r\n  quizResult: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Result;\r\n","import React, { Component } from 'react';\r\nimport quizQuestions from './api/quizQuestions';\r\nimport Quiz from './components/Quiz';\r\nimport Result from './components/Result';\r\nimport logo from './svg/logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      counter: 0,\r\n      questionId: 1,\r\n      question: '',\r\n      answerOptions: [],\r\n      answer: '',\r\n      answersCount: {\r\n        Nintendo: 0,\r\n        Microsoft: 0,\r\n        Sony: 0\r\n      },\r\n      result: ''\r\n    };\r\n\r\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    const shuffledAnswerOptions = quizQuestions.map(question =>\r\n      this.shuffleArray(question.answers)\r\n    );\r\n    this.setState({\r\n      question: quizQuestions[0].question,\r\n      answerOptions: shuffledAnswerOptions[0]\r\n    });\r\n  }\r\n\r\n  shuffleArray(array) {\r\n    var currentIndex = array.length,\r\n      temporaryValue,\r\n      randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  handleAnswerSelected(event) {\r\n    this.setUserAnswer(event.currentTarget.value);\r\n\r\n    if (this.state.questionId < quizQuestions.length) {\r\n      setTimeout(() => this.setNextQuestion(), 300);\r\n    } else {\r\n      setTimeout(() => this.setResults(this.getResults()), 600);\r\n    }\r\n  }\r\n\r\n  setUserAnswer(answer) {\r\n    this.setState((state, props) => ({\r\n      answersCount: {\r\n        ...state.answersCount,\r\n        [answer]: state.answersCount[answer] + 1\r\n      },\r\n      answer: answer\r\n    }));\r\n  }\r\n\r\n  setNextQuestion() {\r\n    const counter = this.state.counter + 1;\r\n    const questionId = this.state.questionId + 1;\r\n\r\n    this.setState({\r\n      counter: counter,\r\n      questionId: questionId,\r\n      question: quizQuestions[counter].question,\r\n      answerOptions: quizQuestions[counter].answers,\r\n      answer: ''\r\n    });\r\n  }\r\n\r\n  getResults() {\r\n    const answersCount = this.state.answersCount;\r\n    const answersCountKeys = Object.keys(answersCount);\r\n    const answersCountValues = answersCountKeys.map(key => answersCount[key]);\r\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);\r\n\r\n    return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\r\n  }\r\n\r\n  setResults(result) {\r\n    if (result.length === 1) {\r\n      this.setState({ result: result[0] });\r\n    } else {\r\n      this.setState({ result: 'Undetermined' });\r\n    }\r\n  }\r\n\r\n  renderQuiz() {\r\n    return (\r\n      <Quiz\r\n        answer={this.state.answer}\r\n        answerOptions={this.state.answerOptions}\r\n        questionId={this.state.questionId}\r\n        question={this.state.question}\r\n        questionTotal={quizQuestions.length}\r\n        onAnswerSelected={this.handleAnswerSelected}\r\n      />\r\n    );\r\n  }\r\n\r\n  renderResult() {\r\n    return <Result quizResult={this.state.result} />;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h2>What should Colleen Watch, the Quiz.</h2>\r\n        </div>\r\n        {this.state.result ? this.renderResult() : this.renderQuiz()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}